>                             Indexed Palette Image format spec                            <
>------------------------------------------------------------------------------------------<
> Designed for pixel art
> File is encoded as a palette number and index
> All data is big-endian encoded
> there are a few encodings
>     |
>     | 8 bit:  | PP-PP-PP-II         | palettes:   64 indices:   4 | mode nibble: 0001
>     | 8 bit:  | PP-PP-PI-II         | palettes:   32 indices:   8 | mode nibble: 0010
>     | 8 bit:  | PP-PP-II-II         | palettes:   16 indices:  16 | mode nibble: 0011
>     | 8 bit:  | PP-PI-II-II         | palettes:    8 indices:  32 | mode nibble: 0100
>     |         |                     |                             |
>     | 16 bit: | PPPP-PPPP-PPPP-PIII | palettes: 8192 indices:   8 | mode nibble: 1000
>     | 16 bit: | PPPP-PPPP-PPPP-IIII | palettes: 4096 indices:  16 | mode nibble: 1001
>     | 16 bit: | PPPP-PPPP-PPPI-IIII | palettes: 2048 indices:  32 | mode nibble: 1010
>     | 16 bit: | PPPP-PPPP-PPII-IIII | palettes: 1024 indices:  64 | mode nibble: 1011
>     | 16 bit: | PPPP-PPPP-PIII-IIII | palettes:  512 indices: 128 | mode nibble: 1100
>     | 16 bit: | PPPP-PPPP-IIII-IIII | palettes:  256 indices: 256 | mode nibble: 1101
>     |
> the 0th index of every palette is transparent black
> all colors are fully opaque
> it is 16 bit color, so two bytes per channel per palette index in the palette table
> separate layers, if implemented, may have their own set of palettes as well as a percent opacity
> Sample header:
>     | 01101001 01110000 01101001 00110001 ( ipi1 in ascii binary )
>     -----------------------------------------
>     | version byte
>     --- LYT --- per layer (16 total) --------
>     | layer in use byte (all 0s or all 1s to enable or disable respectively, if disabled, layer must have no following bytes)
>     | index byte  (end nibble is used)
>     | tile mode byte (normal is all zeros, tiled is all ones)
>     | color mode byte (end nibble is used)
>     | opacity byte
>     | vertical position byte, later layers are put on top of earlier layers in the event of a shared position
>     | if normal mode: layer height, represented in two bytes
>     | if normal mode: layer width, represented in two bytes
>     | if tiled mode: tile height byte, with a maximum of 256 pixels on edge
>     | if tiled mode: tile width byte, with a maximum of 256 pixels on edge
>     | if tiled mode: tiles are stored left-to-right top-to-bottom for each tile and left-to-right top-to-bottom for each pixel with 256 tiles on each edge
>     | start position of that layer's image data "IMD", represented in 8 bytes, 8 byte pointer allows for a maximum file size of approx 4.25 gigabytes
>     | size of IMD, used in compressed data. ignored otherwise, 8 bytes
>     | PLT
>     | name of layer
>     | twice of 00000001 10010111, 00000000 11100111 11010000 00000000 (01 97 00 e7 d0 00 - 0 LYT 00 END 000)
> CLI Flags
>     | -m -8b  -8     8bit mode, allocates 1,536 bytes for palettes
>     | -M -16b -16    16bit mode, allocates 393,216 bytes for palettes
>     | -h -H   -help  prints help text
>     | -L             prealloc maximum image dimensions possible 4096x4096, original is top left if supplied, this will take up over 0.25 gigabytes in 16bit mode
>     | -u -U  -up     upgrades 8bit ipi to 16bit, refactors image (or layers), takes input on what mode to switch to
>     | -d -D -down    downgrades 16bit ipi to 8bit, refactors image (or layers), takes input on what mode to switch to
>     | -smart         if passed with -d scans image (or layers) for palette usage to decide which to remove, refactors image (or layers)
>     | -r -R          refactor palettes, takes input on what mode to switch to
>     | -o -O          output to image
>     | -i -I          input from image
>     | -c -C          compress input image or compresses output ipi if passed with -i